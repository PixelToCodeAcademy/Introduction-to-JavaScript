Let's explore JavaScript objects and how to loop over their properties. 

### JavaScript Objects

An object is a collection of key-value pairs. Unlike arrays, which use numeric indices, objects use keys to name the values.

Here's an example of an object:

```javascript
let person = {
    name: "John",
    age: 30,
    city: "New York"
};
```

In this `person` object, `name`, `age`, and `city` are keys, and "John", 30, and "New York" are their respective values.

### Accessing Object Properties

You can access the properties of an object using either dot notation or bracket notation:

```javascript
console.log(person.name); // Output: John
console.log(person["age"]); // Output: 30
```

### Looping Over Object Properties

There are a few ways to loop over the properties of an object. Let's discuss the most common ones.

#### 1. `for...in` Loop

The `for...in` loop iterates over all enumerable properties of an object.

```javascript
for (let key in person) {
    console.log(key + ": " + person[key]);
}
```

In each iteration, `key` is assigned the name of a property, and `person[key]` gives the value of that property.

#### 2. `Object.keys` Method

The `Object.keys` method returns an array of the object's own enumerable property names. You can then loop over this array using a `for` loop or `for...of`.

```javascript
let keys = Object.keys(person);

for (let i = 0; i < keys.length; i++) {
    console.log(keys[i] + ": " + person[keys[i]]);
}
```

Or with a `for...of` loop:

```javascript
for (let key of Object.keys(person)) {
    console.log(key + ": " + person[key]);
}
```

#### 3. `Object.entries` Method

The `Object.entries` method returns an array of the object's own enumerable property `[key, value]` pairs.

```javascript
for (let [key, value] of Object.entries(person)) {
    console.log(key + ": " + value);
}
```

### Adding and Removing Properties

- **Adding properties**: You can add properties to an object using dot notation or bracket notation.

```javascript
person.country = "USA";
person["profession"] = "Engineer";
console.log(person);
```

- **Removing properties**: Use the `delete` operator to remove a property.

```javascript
delete person.age;
console.log(person); // { name: "John", city: "New York", country: "USA", profession: "Engineer" }
```

### Common Object Methods

- **`Object.values`**: Returns an array of the object's own enumerable property values.

```javascript
let values = Object.values(person);
console.log(values); // ["John", "New York", "USA", "Engineer"]
```

- **`Object.assign`**: Copies the values of all enumerable own properties from one or more source objects to a target object.

```javascript
let additionalInfo = { hobby: "Reading", age: 30 };
Object.assign(person, additionalInfo);
console.log(person); // { name: "John", city: "New York", country: "USA", profession: "Engineer", hobby: "Reading", age: 30 }
```

### Conclusion

Understanding how to work with objects and loop over their properties is crucial in JavaScript. The `for...in` loop, `Object.keys`, and `Object.entries` are common methods to iterate through objects. Additionally, methods like `Object.values` and `Object.assign` provide useful ways to work with object properties.
